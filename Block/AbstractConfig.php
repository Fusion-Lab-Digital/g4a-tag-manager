<?php
/**
 * @author Vasilis Neris
 * @package FusionLab_Ga4
 */

namespace FusionLab\Ga4\Block;

use FusionLab\Ga4\Model\ConfigProvider;
use Magento\Catalog\Helper\Data;
use Magento\Framework\App\ResourceConnection;
use Magento\Framework\DB\Adapter\AdapterInterface;
use Magento\Framework\Exception\NoSuchEntityException;
use Magento\Framework\View\Element\Template;
use Magento\Framework\View\Element\Template\Context;

abstract class AbstractConfig extends Template
{

    protected ConfigProvider $configProvider;

    protected Data $catalogHelper;

    private AdapterInterface $connection;

    /**
     * @param ConfigProvider $configProvider
     * @param Data $catalogHelper
     * @param ResourceConnection $connection
     * @param Context $context
     * @param array $data
     */
    public function __construct(
        ConfigProvider     $configProvider,
        Data               $catalogHelper,
        ResourceConnection $connection,
        Template\Context   $context,
        array              $data = [])
    {
        $this->configProvider = $configProvider;
        $this->catalogHelper = $catalogHelper;
        $this->connection = $connection->getConnection();
        parent::__construct($context, $data);
    }

    /**
     * @return AbstractConfig
     */
    protected function _prepareLayout()
    {
        if (!$this->configProvider->isEnabled()) {
            $this->setTemplate(null);
        }

        return parent::_prepareLayout(); // TODO: Change the autogenerated stub
    }

    /**
     * @return array
     */
    protected function getCategoryPath(): array
    {
        $result = [];

        foreach ($this->catalogHelper->getBreadcrumbPath() as $key => $item) {
            $result[] = [
                'id' => str_replace('category', "", $key),
                'label' => $item['label']
            ];
        }
        return $result;
    }

    /**
     * @return string
     */
    protected function getCurrencyCode(): string
    {
        $result = '';
        try {
            $result = $this->_storeManager->getStore()->getCurrentCurrencyCode();
        } catch (NoSuchEntityException $e) {
        }

        return $result;
    }


    /**
     * @param string $sku
     * @return int
     */
    protected function getProductIdBySku(string $sku): int
    {
        $select = $this->connection->select()
            ->from($this->connection->getTableName('catalog_product_entity'), ['entity_id'])
            ->where('sku = ?', $sku);

        return (int)$this->connection->fetchOne($select);
    }

}
